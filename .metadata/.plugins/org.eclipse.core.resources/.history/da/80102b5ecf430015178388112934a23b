#include <Arduino.h>
#include <Wire.h>
#include "EepromBasedWiredDevice.h"

EepromBasedWiredDevice::EepromBasedWiredDevice(unsigned char deviceAddress, char addressSize, unsigned char endianness)
        : WiredDevice(deviceAddress), addressSize(addressSize), endianness(endianness) {
}

void EepromBasedWiredDevice::writeBlock(unsigned int address, unsigned char* buf, int len) {
    Wire.beginTransmission(getDeviceAddress());
//    for (char i = addressSize - 1; i >= 0; i--) {
//        Wire.write((unsigned char) (address >> (i * 8)) & 0xff);
//    }
  //  Wire.write((unsigned char) (address >> (1 * 8)) & 0xff);
    Wire.write((unsigned char) (address >> (0 * 8)) & 0xff);
    for (int i = 0; i < len; i++) {
        Wire.write(buf[i]);
    }
    Wire.endTransmission();
    delay(EEPROM_BASED_WIRED_DEVICE_AFTER_WRITE_DELAY);
}

void EepromBasedWiredDevice::readBlock(unsigned int address, unsigned char* buf, int len) {
    char tries;
    unsigned char last = len - 1;

    Serial.print("address: ");
    Serial.println(address, HEX);


    Serial.print("len: ");
    Serial.println(len, HEX);

    Wire.beginTransmission(getDeviceAddress());
//    for (char i = addressSize - 1; i >= 0; i--) {
       // Serial.println(i, DEC);
//        Wire.write((unsigned char) (address >> (1 * 8)) & 0xff);
        Wire.write((unsigned char) (address >> (0 * 8)) & 0xff);
    //  }
    Wire.endTransmission();
    delay(EEPROM_BASED_WIRED_DEVICE_AFTER_WRITE_DELAY);
    Wire.requestFrom((int) getDeviceAddress(), len);
    for (int i = 0; i < len; i++) {
    	tries = MAX_RETRIES_ON_READING;
        while (!Wire.available() && --tries > 0) {
            delayMicroseconds(1);
        }
        if (tries == 0) {
            return;
        }
        unsigned char c = Wire.read();
        buf[(endianness == BIG_ENDIAN) ? i : last - i] = c;
        Serial.println(c, HEX);
    }
    Serial.print("done");
}

void EepromBasedWiredDevice::setAddressSize(char addressSize) {
    this->addressSize = addressSize;
}

char EepromBasedWiredDevice::getAddressSize() {
    return addressSize;
}
